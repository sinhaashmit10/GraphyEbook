KeyTopics.js:
// KeyTopics.js
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import OpenAI from 'openai'; // Import the OpenAI library

const openai = new OpenAI({ apiKey: process.env.REACT_APP_OPENAI_API_KEY }); // Initialize OpenAI with your API key

export default function KeyTopics({ subject }) {
  const navigate = useNavigate();
  const [selectedAudience, setSelectedAudience] = useState('');
  const [keyTopics, setKeyTopics] = useState('');
  const [selectedPages, setSelectedPages] = useState(1);

  const handleRadioChange = (e) => {
    setSelectedAudience(e.target.value);
  };

  const handleTopicsChange = (e) => {
    setKeyTopics(e.target.value);
  };

  const handlePagesChange = (pages) => {
    setSelectedPages(pages);
  };

  const generateEbookContent = async () => {
    try {
      const messages = [
        { role: 'user', content: `Generate a ${selectedPages}-page ebook titled "Introduction to ${subject}" covering key topics: ${keyTopics} for a ${selectedAudience}. Write professional content suitable for an ebook.` },
      ];

      // Send the user's message to GPT-3.5 Turbo
      const response = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: messages,
      });

      if (response.choices && response.choices.length > 0) {
        const assistantReply = response.choices[0].message.content;

        // Process the assistant's reply and format it with a Table of Contents
        const formattedEbookContent = formatEbookContent(assistantReply);

        // Pass the formatted content and other details as route state when navigating to Ebook
        navigate('/Ebook', {
          state: {
            ebookContent: formattedEbookContent,
            subject,
            keyTopics,
            selectedAudience,
            selectedPages,
          },
        });
      } else {
        throw new Error('Failed to generate ebook content');
      }
    } catch (error) {
      console.error('Error generating ebook content:', error);
      alert('Failed to generate the ebook content. Please try again later.');
    }
  };

  const formatEbookContent = (content) => {
    // Split the content into chapters
    const chapters = content.split('II. ');

    // Generate the Table of Contents
    let tableOfContents = 'Table of Contents\n';
    for (let i = 0; i < chapters.length; i++) {
      tableOfContents += `${romanize(i + 1)}. ${chapters[i].split(':')[0].trim()} ................................. ${i + 1}\n`;
    }

    // Join the chapters with proper formatting
    const formattedContent = chapters.map((chapter, index) => {
      return `${index === 0 ? '' : '\n'}II. ${chapter}`;
    }).join('');

    // Add the Table of Contents at the beginning
    return `${tableOfContents}\n${formattedContent}`;
  };

  const romanize = (num) => {
    const romanNumerals = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'];
    return romanNumerals[num - 1];
  };

  const handleGenerateClick = () => {
    if (keyTopics.trim() && selectedAudience && selectedPages) {
      generateEbookContent();
    }
  };

  return (
    <div className='ebook-form-container'>
      <h2>Generate ebook with AI</h2>
      <div className="form-group">
        <label className="form-header" htmlFor="topics">
          Key Topics
        </label>
        <input
          type='text'
          className="form-control"
          id="keytopics"
          placeholder="Enter topics separated by commas"
          value={keyTopics}
          onChange={handleTopicsChange}
        />
      </div>

      {/* Radio buttons organized in pairs */}
      <div className="form-group2">
        <label className="form-header">Target Audience</label>
        <div className="row">
          {['Kids', 'Student', 'Apprentice', 'Scholar', 'Expert', 'Thought Leader'].map((audience) => (
            <div className="col" key={audience}>
              <div className="form-check">
                <input
                  className="form-check-input"
                  type="radio"
                  name="flexRadioDefault"
                  id={`flexRadioDefault${audience}`}
                  value={audience}
                  checked={selectedAudience === audience}
                  onChange={handleRadioChange}
                />
                <label className="form-check-label" htmlFor={`flexRadioDefault${audience}`}>
                  {audience}
                  <img src={`${audience.toLowerCase()}.png`} alt="" />
                </label>
              </div>
            </div>
          ))}
        </div>
        <div className="btn-group dropend">
          <button id='pageCounter' className="btn btn-light btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            No. of pages: {selectedPages}
          </button>
          <ul className="dropdown-menu">
            {[1, 2, 3, 4, 5, 6, 7, 8].map((pages) => (
              <li key={pages}>
                <button
                  className="dropdown-item"
                  onClick={() => handlePagesChange(pages)}
                >
                  {pages}
                </button>
              </li>
            ))}
          </ul>
        </div>
      </div>

      <button className="btn btn-success mt-3" onClick={handleGenerateClick}>
        <img src="star.png" width="15" alt=''/> Generate ebook
      </button>
    </div>
  );
}



EbookDisplay.js:
// EbookDisplay.js
import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import OpenAI from 'openai'; // Import the OpenAI library

const openai = new OpenAI({ apiKey: process.env.REACT_APP_OPENAI_API_KEY }); // Initialize OpenAI with your API key

export default function EbookDisplay() {
  const location = useLocation();
  const [isLoading, setIsLoading] = useState(false);
  const [ebookContent, setEbookContent] = useState('');
  const { selectedAudience, selectedPages, subject, keyTopics } = location.state;

  useEffect(() => {
    generateEbookContent();
  }, []); // Fetch content on component mount

  const generateEbookContent = async () => {
    try {
      setIsLoading(true);

      const messages = [
        { role: 'user', content: `Generate a ${selectedPages}-page ebook titled "Introduction to ${subject}" covering key topics: ${keyTopics} for a ${selectedAudience}. Write professional content suitable for an ebook.` },
      ];

      // Send the user's message to GPT-3.5 Turbo
      const response = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: messages,
      });

      if (response.choices && response.choices.length > 0) {
        const assistantReply = response.choices[0].message.content;
        setEbookContent(assistantReply);
      } else {
        throw new Error('Failed to generate ebook content');
      }
    } catch (error) {
      console.error('Error generating ebook content:', error);
      alert('Failed to generate the ebook content. Please try again later.');
    } finally {
      setIsLoading(false);
    }
  };

  const regenerateEbookContent = () => {
    generateEbookContent();
  };

  if (!ebookContent) {
    return (
      <div className='card-side2'>
        <p>No ebook content available.</p>
      </div>
    );
  }

  return (
    <div className='card-side2'>
      <div className="ebook-content" style={{ maxHeight: '550px', overflow: 'auto' }}>
        <p>{ebookContent}</p>
      </div>
      <h5 className='logo-display'>GRAPHY</h5>
      <div className='regen-ebook'>
        <button className="btn btn-light mx-1" onClick={regenerateEbookContent} disabled={isLoading}>
          {isLoading ? "Regenerating..." : <><img src="redoblack.png" width="15" alt='' /> Regenerate</>}
        </button>
        <button className='btn btn-light mx-1'>
          <img src="./download.png" alt="" /> Download PDF
        </button>
        <button id='publish-button' className='btn btn-light mx-1'>
          <img src="./star.png" alt="" /> Publish ebook
        </button>
      </div>
    </div>
  );
}
